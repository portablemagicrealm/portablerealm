//
// JSONArray.cs
//
// Author:
//       Steve Jakab <>
//
// Copyright (c) 2014 Steve Jakab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace AssemblyCSharp
{
	public class JSONArray : JSONValue
	{
		#region Properties

		public int Count
		{
			get{
				if (mValue != null)
					return mValue.Count;
				return 0;
			}
		}

		public JSONValue this [int index]
		{
			get{
				if (mValue != null)
					return mValue[index];
				return null;
			}

			set{
				if (mValue != null && index >= 0 && index < mValue.Count)
					mValue[index] = value;
				else
					throw new IndexOutOfRangeException();
			}
		}

		#endregion

		#region Methods

		public JSONArray ()
		{
		}

		public JSONArray (int length)
		{
			mValue = new List<JSONValue>(length);
			for (int i = 0; i < length; ++i)
			{
				mValue.Add(new JSONNull());
			}
		}

		public JSONArray (StringBuilder data)
		{
			Decode(data);
		}

		public void Decode(StringBuilder data)
		{
			while (Char.IsWhiteSpace(data[0]))
				data.Remove(0, 1);

			if (data[0] != '[')
				throw new InvalidJSONException();
			data.Remove(0, 1);

			while (Char.IsWhiteSpace(data[0]))
				data.Remove(0, 1);

			while (data[0] != ']')
			{
				JSONValue value = JSONDecoder.CreateJSONValue(data);
				mValue.Add(value);
				
				while (Char.IsWhiteSpace(data[0]))
					data.Remove(0, 1);

				if (data[0] != ',' && data[0] != ']')
					throw new InvalidJSONException();
				
				if (data[0] == ',')
					data.Remove(0, 1);
			}
			data.Remove(0, 1);
		}

		public void Encode(StringBuilder data)
		{
			data.Append('[');
			for (int i = 0; i < mValue.Count; ++i)
			{
				mValue[i].Encode(data);
				if (i < mValue.Count - 1)
					data.Append(',');
			}
			data.Append(']');
		}

		#endregion

		#region Members

		private IList<JSONValue> mValue = new List<JSONValue>();

		#endregion
	}
}

