//
// JSONString.cs
//
// Author:
//       Steve Jakab <>
//
// Copyright (c) 2014 Steve Jakab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Text;

namespace AssemblyCSharp
{
	public class JSONString : JSONValue
	{
		#region Properties

		public string Value
		{
			get{
				return mValue;
			}

			set{
				mValue = value;
			}
		}

		#endregion

		#region Methods

		public JSONString ()
		{
		}

		public JSONString (String value)
		{
			Value = value;
		}

		public JSONString (StringBuilder data)
		{
			Decode(data);
		}
		
		public void Decode(StringBuilder data)
		{
			while (Char.IsWhiteSpace(data[0]))
				data.Remove(0, 1);

			if (data[0] != '\"')
				throw new InvalidJSONException();

			data.Remove(0, 1);
			StringBuilder newString = new StringBuilder();
			while (data[0] != '"')
			{
				if (data[0] == '\\')
				{
					// NOTE: not handling \u0000
					switch (data[1])
					{
						case '"':
							newString.Append('"');
							break;
						case '\\':
							newString.Append('\\');
							break;
						case '/':
							newString.Append('/');
							break;
						case 'b':
							newString.Append('\b');
							break;
						case 'f':
							newString.Append('\f');
							break;
						case 'n':
							newString.Append('\n');
							break;
						case 'r':
							newString.Append('\r');
							break;
						case 't':
							newString.Append('\t');
							break;
						default:
							throw new InvalidJSONException();
					}
					data.Remove(0, 2);
				}
				else if (data[0] != '"')
				{
					newString.Append((char)data[0]);
					data.Remove(0, 1);
				}
			}
			data.Remove(0, 1);
			mValue = newString.ToString();
		}

		public void Encode(StringBuilder data)
		{
			data.Append('"');
			if (mValue != null)
			{
				for (int i = 0; i < mValue.Length; ++i)
				{
					char c = mValue[i];
					switch (c)
					{
						case '"':
							data.Append("\\\"");
							break;
						case '\\':
							data.Append("\\\\");
							break;
						case '/':
							data.Append("\\/");
							break;
						case '\b':
							data.Append("\\b");
							break;
						case '\f':
							data.Append("\\f");
							break;
						case '\n':
							data.Append("\\n");
							break;
						case '\r':
							data.Append("\\r");
							break;
						case '\t':
							data.Append("\\t");
							break;
						default:
							data.Append(c);
							break;
					}
				}
			}
			data.Append('"');
		}

		#endregion

		#region Members

		private string mValue;

		#endregion
	}
}

