//
// JSONObject.cs
//
// Author:
//       Steve Jakab <>
//
// Copyright (c) 2014 Steve Jakab
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace AssemblyCSharp
{
	public class JSONObject : JSONValue, IEnumerable<KeyValuePair<string, JSONValue>>
	{
		#region Properties

		public IDictionary<string, JSONValue> RawValue
		{
			get{
				return mValue;
			}
		}

		public JSONValue this[string key]
		{
			get{
				if (mValue.ContainsKey(key))
					return mValue[key];
				return null;
			}

			set{
				mValue[key] = value;
			}
		}

		#endregion

		#region Methods

		public JSONObject ()
		{
		}

		public JSONObject (StringBuilder data)
		{
			Decode(data);
		}

		public void Decode(StringBuilder data)
		{
			while (Char.IsWhiteSpace(data[0]))
				data.Remove(0, 1);

			if (data[0] != '{')
				throw new InvalidJSONException();
			data.Remove(0, 1);

			while (Char.IsWhiteSpace(data[0]))
				data.Remove(0, 1);

			while (data[0] != '}')
			{
				JSONValue key = JSONDecoder.CreateJSONValue(data);
				if (!(key is JSONString))
				    throw new InvalidJSONException();

				while (Char.IsWhiteSpace(data[0]))
					data.Remove(0, 1);

				if (data[0] != ':')
					throw new InvalidJSONException();
				data.Remove(0, 1);

				JSONValue value = JSONDecoder.CreateJSONValue(data);
				mValue.Add(((JSONString)key).Value, value);

				while (Char.IsWhiteSpace(data[0]))
					data.Remove(0, 1);
				if (data[0] != ',' && data[0] != '}')
					throw new InvalidJSONException();

				if (data[0] == ',')
					data.Remove(0, 1);
			}
			data.Remove(0, 1);
		}

		public void Encode(StringBuilder data)
		{
			data.Append('{');
			int i = 0, count = mValue.Count;
			foreach (KeyValuePair<string, JSONValue> pair in mValue)
			{
				new JSONString(pair.Key).Encode(data);
				data.Append(':');
				pair.Value.Encode(data);

				if (i < count - 1)
					data.Append(',');
				++i;
			}
			data.Append('}');
		}

		/// <summary>
		/// Returns an enumerator that iterates through a collection.
		/// </summary>
		/// <returns>The enumerator.</returns>
		public IEnumerator<KeyValuePair<string, JSONValue>> GetEnumerator()
		{
			return mValue.GetEnumerator();
		}

		private IEnumerator GetEnumerator1()
		{
			return this.GetEnumerator();
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator1();
		}

		#endregion

		#region Members

		private IDictionary<string, JSONValue> mValue = new Dictionary<string, JSONValue>();

		#endregion
	}
}

